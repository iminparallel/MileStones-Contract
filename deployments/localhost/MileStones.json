{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Milestones__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "AllFundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "milestone",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReleased",
          "type": "uint256"
        }
      ],
      "name": "MilestoneCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "OwnersWithdrawl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "changeMileStonePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "productId",
          "type": "string"
        }
      ],
      "name": "completeMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "productId",
          "type": "string"
        }
      ],
      "name": "getUserMilestoneDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalMilestones",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "milestoneCompleted",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountWithdrawn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isCompleted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "endsAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct MileStones.Milestone",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "productId",
          "type": "string"
        }
      ],
      "name": "lockFunds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ownersWithdrawl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ffa45d5991584058ef21f8e5d8cb78c3c9637bf57fbbbfdd2f28454ee45f6c8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1330404",
    "logsBloom": "0x
    "blockHash": "0xdafbfb3f1a68e898eae02d22ca8be742b4a374792e322dcda59c5247f8ffd6f2",
    "transactionHash": "0x4ffa45d5991584058ef21f8e5d8cb78c3c9637bf57fbbbfdd2f28454ee45f6c8",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1330404",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    259200,
    "10"
  ],
  "numDeployments": 1,
  "solcInputHash": "c3f6620a4fdfe8873be2f4f6089c5b3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Milestones__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"AllFundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milestone\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReleased\",\"type\":\"uint256\"}],\"name\":\"MilestoneCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OwnersWithdrawl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMileStonePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"}],\"name\":\"completeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"}],\"name\":\"getUserMilestoneDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMilestones\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestoneCompleted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isCompleted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"}],\"internalType\":\"struct MileStones.Milestone\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"productId\",\"type\":\"string\"}],\"name\":\"lockFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownersWithdrawl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MileStones.sol\":\"MileStones\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"contracts/MileStones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n//import \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n//import \\\"./PriceConverter.sol\\\";\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nerror Milestones__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\n\\r\\n\\r\\ncontract MileStones is AutomationCompatibleInterface {\\r\\n    //using PriceConverter for uint256;\\r\\n   \\r\\n    enum MileStoneState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    } \\r\\n\\r\\n    struct Milestone {\\r\\n        address creator;\\r\\n        uint256 totalMilestones;\\r\\n        uint256 totalAmount;\\r\\n        uint256 milestoneCompleted;\\r\\n        uint256 amountWithdrawn;\\r\\n        uint256 createdAt;\\r\\n        bool isCompleted;\\r\\n        uint256 endsAt;\\r\\n    }\\r\\n\\r\\n    mapping(string => Milestone) private products; \\r\\n    \\r\\n    uint256 private constant MILESTONE_COUNT = 5;\\r\\n    uint256 private constant PLATFORM_PERCENTAGE = 10; // Platform fee of 10%\\r\\n    uint256 private owner_balance ;\\r\\n\\r\\n    address private platformWallet;\\r\\n    string[] private activeMilestones;\\r\\n\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private s_milestone_price;\\r\\n\\r\\n    event FundsLocked(address indexed user, uint256 amount);\\r\\n    event MilestoneCompleted(address indexed user, uint256 milestone, uint256 amountReleased);\\r\\n    event AllFundsWithdrawn(address indexed user, uint256 totalAmount);\\r\\n    event OwnersWithdrawl(address indexed creator, uint256 amount);\\r\\n    event PriceChange(uint256 amount);\\r\\n\\r\\n    MileStoneState private s_milestoneState;\\r\\n\\r\\n    //AggregatorV3Interface public s_priceFeed;\\r\\n\\r\\n    constructor(address _platformWallet, uint256 interval, /*address priceFeed,*/ uint256 price) {\\r\\n        require(_platformWallet != address(0), \\\"Invalid platform wallet\\\");\\r\\n        platformWallet = _platformWallet;\\r\\n        owner_balance = 0;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n        //s_priceFeed = AggregatorV3Interface(priceFeed);\\r\\n        s_milestone_price = price;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(platformWallet == msg.sender, \\\"Only the platform wallet can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCreator(string memory productId) {\\r\\n        require(products[productId].creator == msg.sender, \\\"Only the creator wallet can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function lockFunds(string memory productId) external payable {\\r\\n        //uint256 minimumUSD =  s_milestone_price**18;\\r\\n        //uint256 convertedRate = msg.value.getConversionRate(s_priceFeed);\\r\\n        //console.log('contract entry rate', convertedRate);\\r\\n        //console.log('contract entry fee', minimumUSD);\\r\\n\\r\\n        require(msg.value /*.getConversionRate(s_priceFeed)*/ >= s_milestone_price, \\\"Sent amount must be higher than entry fee\\\");\\r\\n        require(products[productId].totalAmount == 0, \\\"User already locked funds\\\");\\r\\n        activeMilestones.push(productId);\\r\\n        uint256 fee = (msg.value * PLATFORM_PERCENTAGE) / 100;\\r\\n        uint256 netAmount = msg.value - fee;\\r\\n        owner_balance += fee;\\r\\n        uint256 endsAt = block.timestamp + 3600*24*7;\\r\\n\\r\\n        //payable(platformWallet).transfer(fee);\\r\\n        \\r\\n        products[productId] = Milestone({\\r\\n            creator: msg.sender,\\r\\n            totalMilestones: MILESTONE_COUNT, \\r\\n            totalAmount: netAmount,\\r\\n            milestoneCompleted: 0,\\r\\n            amountWithdrawn: 0,\\r\\n            createdAt: block.timestamp,\\r\\n            isCompleted: false,\\r\\n            endsAt: endsAt\\r\\n        });\\r\\n\\r\\n\\r\\n        emit FundsLocked(msg.sender, netAmount);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(bytes memory  )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory  )\\r\\n    {\\r\\n        bool isOpen = MileStoneState.OPEN == s_milestoneState;\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasActiveMilestones = activeMilestones.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasActiveMilestones);\\r\\n        return (upkeepNeeded, \\\"0x0\\\"); \\r\\n    }  \\r\\n\\r\\n\\r\\n    function performUpkeep(bytes calldata  ) external override {\\r\\n        (bool upkeepNeeded,) = checkUpkeep(\\\"\\\");\\r\\n         require(upkeepNeeded, \\\"Upkeep not needed\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Milestones__UpkeepNotNeeded(address(this).balance, activeMilestones.length, uint256(s_milestoneState));\\r\\n        }\\r\\n        s_milestoneState = MileStoneState.CALCULATING;\\r\\n        string[] memory copiedActiveMilestone = activeMilestones;\\r\\n        uint256 temp_owner_balance = owner_balance;\\r\\n        uint256 j;\\r\\n        j = 0;\\r\\n        string[] memory updatedMileStones = new string[](copiedActiveMilestone.length); \\r\\n                \\r\\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++) {\\r\\n            string memory milestoneId = copiedActiveMilestone[i];\\r\\n            Milestone storage milestone = products[milestoneId];\\r\\n                    \\r\\n            if (milestone.endsAt > block.timestamp) {\\r\\n                updatedMileStones[j] = milestoneId;\\r\\n                j++;\\r\\n            } else {\\r\\n                temp_owner_balance += milestone.totalAmount - milestone.amountWithdrawn;\\r\\n                //milestone.isCompleted = true;\\r\\n                //milestone.amountWithdrawn = milestone.totalAmount;\\r\\n            }\\r\\n        }\\r\\n        if (j < updatedMileStones.length) {\\r\\n            string[] memory resizedMileStones = new string[](j);\\r\\n            for (uint256 i = 0; i < j; i++) {\\r\\n                resizedMileStones[i] = updatedMileStones[i];\\r\\n            }\\r\\n            activeMilestones = resizedMileStones;\\r\\n        }\\r\\n        owner_balance = temp_owner_balance;\\r\\n        //activeMilestones = updatedMileStones;\\r\\n        //s_lastTimeStamp = block.timestamp;\\r\\n        s_milestoneState = MileStoneState.OPEN;\\r\\n    }  \\r\\n\\r\\n    function completeMilestone(string memory productId) external onlyCreator(productId){\\r\\n        Milestone storage product = products[productId];\\r\\n        require(product.totalAmount > 0, \\\"No funds locked\\\");\\r\\n        require(product.endsAt >= block.timestamp, \\\"Milestone Expired\\\");\\r\\n        require(product.milestoneCompleted < product.totalMilestones, \\\"All milestones already completed\\\");\\r\\n\\r\\n        uint256 milestoneAmount = product.totalAmount / product.totalMilestones;\\r\\n        product.milestoneCompleted++;\\r\\n\\r\\n        if (product.milestoneCompleted == product.totalMilestones) {\\r\\n            // Final milestone: Release all remaining funds\\r\\n            string[] memory copiedActiveMilestone = activeMilestones;\\r\\n            string[] memory updatedMileStones = new string[] (copiedActiveMilestone.length - 1);\\r\\n            uint256 j;\\r\\n            j = 0;\\r\\n            for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\\r\\n                if (keccak256(abi.encodePacked(copiedActiveMilestone[i])) != keccak256(abi.encodePacked(productId))) {\\r\\n                    updatedMileStones[j] = copiedActiveMilestone[i];\\r\\n                    j+=1;\\r\\n                }\\r\\n            }\\r\\n            activeMilestones = updatedMileStones;\\r\\n\\r\\n            uint256 remainingAmount = product.totalAmount - product.amountWithdrawn;\\r\\n            product.amountWithdrawn += remainingAmount;\\r\\n            product.isCompleted = true;\\r\\n            payable(msg.sender).transfer(remainingAmount);\\r\\n            emit AllFundsWithdrawn(msg.sender, product.totalAmount);\\r\\n        } else {\\r\\n            product.amountWithdrawn += milestoneAmount;\\r\\n            payable(msg.sender).transfer(milestoneAmount);\\r\\n            emit MilestoneCompleted(msg.sender, product.milestoneCompleted, milestoneAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ownersWithdrawl( uint256 amount) external onlyOwner() {\\r\\n       /* string[] memory copiedActiveMilestone = activeMilestones;\\r\\n        uint256 temp_owner_balance = owner_balance;\\r\\n        uint256 j;\\r\\n        j = 0;\\r\\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\\r\\n            string memory milestoneId = copiedActiveMilestone[i];\\r\\n            Milestone storage milestone =  products[milestoneId];\\r\\n            if (milestone.endsAt > block.timestamp) {\\r\\n                j+=1;\\r\\n            }\\r\\n        }\\r\\n        string[] memory updatedMileStones = new string[](j);\\r\\n        j = 0;\\r\\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\\r\\n            string memory milestoneId = copiedActiveMilestone[i];\\r\\n            Milestone storage milestone =  products[milestoneId];\\r\\n            if (milestone.endsAt > block.timestamp) {\\r\\n                updatedMileStones[j] = copiedActiveMilestone[i];\\r\\n                j+=1;\\r\\n            }else{\\r\\n                temp_owner_balance += milestone.totalAmount -  milestone.amountWithdrawn;\\r\\n                milestone.isCompleted = true;\\r\\n                milestone.amountWithdrawn = milestone.totalAmount;\\r\\n            }\\r\\n            products[milestoneId] = milestone;\\r\\n        }\\r\\n        owner_balance = temp_owner_balance;\\r\\n        activeMilestones = updatedMileStones;\\r\\n        s_lastTimeStamp = block.timestamp; */\\r\\n        require(amount <= owner_balance * 70 / 100, \\\"Amount exceeds collected funds\\\");\\r\\n        payable(msg.sender).transfer(amount);\\r\\n        owner_balance -= amount;\\r\\n        emit OwnersWithdrawl(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function changeMileStonePrice( uint256 amount) external onlyOwner() {\\r\\n        s_milestone_price = amount;\\r\\n        emit PriceChange(amount);\\r\\n    }\\r\\n\\r\\n    /*function getUserMilestonePrice() public onlyOwner() onlyCreator(productId) view returns (uint256) {\\r\\n        return s_milestone_price;\\r\\n    }*/\\r\\n\\r\\n    function getUserMilestoneDetails(string memory productId) public /*onlyOwner() onlyCreator(productId)*/  view returns (Milestone memory) {\\r\\n        return products[productId];\\r\\n    }\\r\\n\\r\\n    function getCurrentTimestamp() public view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getOwnerBalance() public view onlyOwner() returns (uint256) {\\r\\n        return owner_balance;\\r\\n    }\\r\\n\\r\\n    /*function getMainNetBalance() public view returns (uint256) {\\r\\n        return PriceConverter.getPrice(s_priceFeed);\\r\\n    }*/\\r\\n\\r\\n    /*function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }*/\\r\\n\\r\\n    function getPrice() public view returns (uint256) {\\r\\n        uint256 minimumUSD =  s_milestone_price; \\r\\n        return minimumUSD ;   \\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x33ef0763f24aca10f8d2575d585f383147db0f007f7bb39e85af49c5a7dbcbf0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "products",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Milestone)51_storage)"
      },
      {
        "astId": 64,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "owner_balance",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 66,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "platformWallet",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 69,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "activeMilestones",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 75,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "s_milestone_price",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 108,
        "contract": "contracts/MileStones.sol:MileStones",
        "label": "s_milestoneState",
        "offset": 0,
        "slot": "6",
        "type": "t_enum(MileStoneState)34"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(MileStoneState)34": {
        "encoding": "inplace",
        "label": "enum MileStones.MileStoneState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Milestone)51_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct MileStones.Milestone)",
        "numberOfBytes": "32",
        "value": "t_struct(Milestone)51_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Milestone)51_storage": {
        "encoding": "inplace",
        "label": "struct MileStones.Milestone",
        "members": [
          {
            "astId": 36,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 38,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "totalMilestones",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 40,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "totalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 42,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "milestoneCompleted",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 44,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "amountWithdrawn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 46,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "createdAt",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "isCompleted",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 50,
            "contract": "contracts/MileStones.sol:MileStones",
            "label": "endsAt",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}