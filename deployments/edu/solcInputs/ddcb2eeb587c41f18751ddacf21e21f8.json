{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/MileStones.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\";\r\n//import \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n//import \"./PriceConverter.sol\";\r\n//import \"hardhat/console.sol\";\r\nerror Milestones__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\r\n\r\n\r\ncontract MileStones is AutomationCompatibleInterface {\r\n    //using PriceConverter for uint256;\r\n   \r\n    enum MileStoneState {\r\n        OPEN,\r\n        CALCULATING\r\n    } \r\n\r\n    struct Milestone {\r\n        address creator;\r\n        uint256 totalMilestones;\r\n        uint256 totalAmount;\r\n        uint256 milestoneCompleted;\r\n        uint256 amountWithdrawn;\r\n        uint256 createdAt;\r\n        bool isCompleted;\r\n        uint256 endsAt;\r\n    }\r\n\r\n    mapping(string => Milestone) private products; \r\n    \r\n    uint256 private constant MILESTONE_COUNT = 5;\r\n    uint256 private constant PLATFORM_PERCENTAGE = 5; // Platform fee of 5%\r\n    uint256 private owner_balance ;\r\n\r\n    address private platformWallet;\r\n    string[] private activeMilestones;\r\n\r\n    uint256 private immutable i_interval;\r\n    uint256 private s_lastTimeStamp;\r\n    uint256 private s_milestone_price;\r\n\r\n    event FundsLocked(address indexed user, uint256 amount);\r\n    event MilestoneCompleted(address indexed user, uint256 milestone, uint256 amountReleased);\r\n    event AllFundsWithdrawn(address indexed user, uint256 totalAmount);\r\n    event OwnersWithdrawl(address indexed creator, uint256 amount);\r\n    event PriceChange(uint256 amount);\r\n\r\n    MileStoneState private s_milestoneState;\r\n\r\n    //AggregatorV3Interface public s_priceFeed;\r\n\r\n    constructor(address _platformWallet, uint256 interval, /*address priceFeed,*/ uint256 price) {\r\n        require(_platformWallet != address(0), \"Invalid platform wallet\");\r\n        platformWallet = _platformWallet;\r\n        owner_balance = 0;\r\n        s_lastTimeStamp = block.timestamp;\r\n        i_interval = interval;\r\n        //s_priceFeed = AggregatorV3Interface(priceFeed);\r\n        s_milestone_price = price;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(platformWallet == msg.sender, \"Only the platform wallet can perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator(string memory productId) {\r\n        require(products[productId].creator == msg.sender, \"Only the creator wallet can perform this action\");\r\n        _;\r\n    }\r\n\r\n    function lockFunds(string memory productId) external payable {\r\n        //uint256 minimumUSD =  s_milestone_price**18;\r\n        //uint256 convertedRate = msg.value.getConversionRate(s_priceFeed);\r\n        //console.log('contract entry rate', convertedRate);\r\n        //console.log('contract entry fee', minimumUSD);\r\n\r\n        require(msg.value /*.getConversionRate(s_priceFeed)*/ >= s_milestone_price, \"Sent amount must be higher than entry fee\");\r\n        require(products[productId].totalAmount == 0, \"User already locked funds\");\r\n        activeMilestones.push(productId);\r\n        uint256 fee = (msg.value * PLATFORM_PERCENTAGE) / 100;\r\n        uint256 netAmount = msg.value - fee;\r\n        owner_balance += fee;\r\n        uint256 endsAt = block.timestamp + 3600*24*7;\r\n\r\n        //payable(platformWallet).transfer(fee);\r\n        \r\n        products[productId] = Milestone({\r\n            creator: msg.sender,\r\n            totalMilestones: MILESTONE_COUNT, \r\n            totalAmount: netAmount,\r\n            milestoneCompleted: 0,\r\n            amountWithdrawn: 0,\r\n            createdAt: block.timestamp,\r\n            isCompleted: false,\r\n            endsAt: endsAt\r\n        });\r\n\r\n\r\n        emit FundsLocked(msg.sender, netAmount);\r\n    }\r\n\r\n    function checkUpkeep(bytes memory  )\r\n        public\r\n        view\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory  )\r\n    {\r\n        bool isOpen = MileStoneState.OPEN == s_milestoneState;\r\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\r\n        bool hasActiveMilestones = activeMilestones.length > 0;\r\n        bool hasBalance = address(this).balance > 0;\r\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasActiveMilestones);\r\n        return (upkeepNeeded, \"0x0\"); \r\n    } \r\n\r\n\r\n    function performUpkeep(bytes calldata  ) external override {\r\n        (bool upkeepNeeded,) = checkUpkeep(\"\");\r\n         require(upkeepNeeded, \"Upkeep not needed\");\r\n        if (!upkeepNeeded) {\r\n            revert Milestones__UpkeepNotNeeded(address(this).balance, activeMilestones.length, uint256(s_milestoneState));\r\n        }\r\n        s_milestoneState = MileStoneState.CALCULATING;\r\n        string[] memory copiedActiveMilestone = activeMilestones;\r\n        uint256 temp_owner_balance = owner_balance;\r\n        uint256 j;\r\n        j = 0;\r\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\r\n            string memory milestoneId = copiedActiveMilestone[i];\r\n            Milestone storage milestone =  products[milestoneId];\r\n            if (milestone.endsAt > block.timestamp) {\r\n                j+=1;\r\n            }\r\n        }\r\n        string[] memory updatedMileStones = new string[](j);\r\n        j = 0;\r\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\r\n            string memory milestoneId = copiedActiveMilestone[i];\r\n            Milestone storage milestone =  products[milestoneId];\r\n            if (milestone.endsAt > block.timestamp) {\r\n                updatedMileStones[j] = copiedActiveMilestone[i];\r\n                j+=1;\r\n            }else{\r\n                temp_owner_balance += milestone.totalAmount -  milestone.amountWithdrawn;\r\n                milestone.isCompleted = true;\r\n                milestone.amountWithdrawn = milestone.totalAmount;\r\n            }\r\n            products[milestoneId] = milestone;\r\n        }\r\n        owner_balance = temp_owner_balance;\r\n        activeMilestones = updatedMileStones;\r\n        s_lastTimeStamp = block.timestamp;\r\n        s_milestoneState = MileStoneState.OPEN;\r\n    } \r\n\r\n    function completeMilestone(string memory productId) external onlyCreator(productId){\r\n        Milestone storage product = products[productId];\r\n        require(product.totalAmount > 0, \"No funds locked\");\r\n        require(product.endsAt >= block.timestamp, \"Milestone Expired\");\r\n        require(product.milestoneCompleted < product.totalMilestones, \"All milestones already completed\");\r\n\r\n        uint256 milestoneAmount = product.totalAmount / product.totalMilestones;\r\n        product.milestoneCompleted++;\r\n\r\n        if (product.milestoneCompleted == product.totalMilestones) {\r\n            // Final milestone: Release all remaining funds\r\n            string[] memory copiedActiveMilestone = activeMilestones;\r\n            string[] memory updatedMileStones = new string[] (copiedActiveMilestone.length - 1);\r\n            uint256 j;\r\n            j = 0;\r\n            for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\r\n                if (keccak256(abi.encodePacked(copiedActiveMilestone[i])) != keccak256(abi.encodePacked(productId))) {\r\n                    updatedMileStones[j] = copiedActiveMilestone[i];\r\n                    j+=1;\r\n                }\r\n            }\r\n            activeMilestones = updatedMileStones;\r\n\r\n            uint256 remainingAmount = product.totalAmount - product.amountWithdrawn;\r\n            product.amountWithdrawn += remainingAmount;\r\n            product.isCompleted = true;\r\n            payable(msg.sender).transfer(remainingAmount);\r\n            emit AllFundsWithdrawn(msg.sender, product.totalAmount);\r\n        } else {\r\n            product.amountWithdrawn += milestoneAmount;\r\n            payable(msg.sender).transfer(milestoneAmount);\r\n            emit MilestoneCompleted(msg.sender, product.milestoneCompleted, milestoneAmount);\r\n        }\r\n    }\r\n\r\n    function ownersWithdrawl( uint256 amount) external onlyOwner() {\r\n       /* string[] memory copiedActiveMilestone = activeMilestones;\r\n        uint256 temp_owner_balance = owner_balance;\r\n        uint256 j;\r\n        j = 0;\r\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\r\n            string memory milestoneId = copiedActiveMilestone[i];\r\n            Milestone storage milestone =  products[milestoneId];\r\n            if (milestone.endsAt > block.timestamp) {\r\n                j+=1;\r\n            }\r\n        }\r\n        string[] memory updatedMileStones = new string[](j);\r\n        j = 0;\r\n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\r\n            string memory milestoneId = copiedActiveMilestone[i];\r\n            Milestone storage milestone =  products[milestoneId];\r\n            if (milestone.endsAt > block.timestamp) {\r\n                updatedMileStones[j] = copiedActiveMilestone[i];\r\n                j+=1;\r\n            }else{\r\n                temp_owner_balance += milestone.totalAmount -  milestone.amountWithdrawn;\r\n                milestone.isCompleted = true;\r\n                milestone.amountWithdrawn = milestone.totalAmount;\r\n            }\r\n            products[milestoneId] = milestone;\r\n        }\r\n        owner_balance = temp_owner_balance;\r\n        activeMilestones = updatedMileStones;\r\n        s_lastTimeStamp = block.timestamp; */\r\n        require(amount <= owner_balance * 70 / 100, \"Amount exceeds collected funds\");\r\n        payable(msg.sender).transfer(amount);\r\n        owner_balance -= amount;\r\n        emit OwnersWithdrawl(msg.sender, amount);\r\n    }\r\n\r\n    function changeMileStonePrice( uint256 amount) external onlyOwner() {\r\n        s_milestone_price = amount;\r\n        emit PriceChange(amount);\r\n    }\r\n\r\n    /*function getUserMilestonePrice() public onlyOwner() onlyCreator(productId) view returns (uint256) {\r\n        return s_milestone_price;\r\n    }*/\r\n\r\n    function getUserMilestoneDetails(string memory productId) public /*onlyOwner() onlyCreator(productId)*/  view returns (Milestone memory) {\r\n        return products[productId];\r\n    }\r\n\r\n    function getCurrentTimestamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getOwnerBalance() public view onlyOwner() returns (uint256) {\r\n        return owner_balance;\r\n    }\r\n\r\n    /*function getMainNetBalance() public view returns (uint256) {\r\n        return PriceConverter.getPrice(s_priceFeed);\r\n    }*/\r\n\r\n    /*function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return s_priceFeed;\r\n    }*/\r\n\r\n    function getPrice() public view returns (uint256) {\r\n        uint256 minimumUSD =  s_milestone_price; \r\n        return minimumUSD ;   \r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}