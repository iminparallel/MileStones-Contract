{
  "language": "Solidity",
  "sources": {
    "contracts/MileStones.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MileStones {\n    \n    struct User {\n        uint256 totalAmount;\n        uint256 milestoneCompleted;\n        uint256 amountWithdrawn;\n    }\n\n    mapping(address => User) public users;\n    \n    uint256 public milestoneCount = 4;\n    uint256 public platformFeePercentage = 2; // Example platform fee of 2%\n    address public platformWallet;\n\n    event FundsLocked(address indexed user, uint256 amount);\n    event MilestoneCompleted(address indexed user, uint256 milestone, uint256 amountReleased);\n    event AllFundsWithdrawn(address indexed user, uint256 totalAmount);\n\n    constructor(address _platformWallet) {\n        require(_platformWallet != address(0), \"Invalid platform wallet\");\n        platformWallet = _platformWallet;\n    }\n\n    function lockFunds() external payable {\n        require(msg.value > 0, \"Funds must be greater than 0\");\n        require(users[msg.sender].totalAmount == 0, \"User already locked funds\");\n\n        uint256 fee = (msg.value * platformFeePercentage) / 100;\n        uint256 netAmount = msg.value - fee;\n\n        payable(platformWallet).transfer(fee);\n\n        users[msg.sender] = User({\n            totalAmount: netAmount,\n            milestoneCompleted: 0,\n            amountWithdrawn: 0\n        });\n\n        emit FundsLocked(msg.sender, netAmount);\n    }\n\n    function completeMilestone() external {\n        User storage user = users[msg.sender];\n        require(user.totalAmount > 0, \"No funds locked\");\n        require(user.milestoneCompleted < milestoneCount, \"All milestones already completed\");\n\n        uint256 milestoneAmount = user.totalAmount / milestoneCount;\n        user.milestoneCompleted++;\n\n        if (user.milestoneCompleted == milestoneCount) {\n            // Final milestone: Release all remaining funds\n            uint256 remainingAmount = user.totalAmount - user.amountWithdrawn;\n            user.amountWithdrawn += remainingAmount;\n            payable(msg.sender).transfer(remainingAmount);\n            emit AllFundsWithdrawn(msg.sender, user.totalAmount);\n        } else {\n            user.amountWithdrawn += milestoneAmount;\n            payable(msg.sender).transfer(milestoneAmount);\n            emit MilestoneCompleted(msg.sender, user.milestoneCompleted, milestoneAmount);\n        }\n    }\n\n    function getUserDetails(address _user) external view returns (User memory) {\n        return users[_user];\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}